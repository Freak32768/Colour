(use gl)
(use gl.glut)

;;define constant values
(define *window-width* 640)
(define *window-height* 640)
(define *floor-size* 10)
(define *light0-pos* #f32(0 10 0 1))
(define *light0-color* #f32(1 1 1 0))

;;define classes
(define-class <3d-object> ()
  ((x :init-value 0 :init-keyword :x :accessor x-of)
   (y :init-value 0 :init-keyword :y :accessor y-of)
   (z :init-value 0 :init-keyword :z :accessor z-of)
   (rx :init-value 0 :init-keyword :rx :accessor rx-of)
   (ry :init-value 0 :init-keyword :ry :accessor ry-of)
   (rz :init-value 0 :init-keyword :rz :accessor rz-of)
   (color :init-value #f32(0 0 0 1) :init-keyword :color :accessor color-of)
   ))

;;define dynamic variables
(define *player* (make <3d-object> :x 0 :y 0.5 :z 0 :color #f32(0 1 0 1)) )
(define *keycode* #\null)

(define (display)
  (gl-clear (logior GL_COLOR_BUFFER_BIT GL_DEPTH_BUFFER_BIT))
  (gl-light GL_LIGHT0 GL_POSITION *light0-pos*)
  (display-canvas)
  (glut-swap-buffers)
  )

(define (display-canvas)
  (display-floor)
  (display-player)
  )

(define (display-floor)
  (gl-push-matrix)
  (gl-material GL_FRONT_AND_BACK GL_DIFFUSE #f32(0.5 0.5 0.5 1))
  (gl-translate 0 0 0)
  (gl-begin GL_QUADS)
  (gl-vertex (/ (- *floor-size*) 2) 0 (/ (- *floor-size*) 2) )
  (gl-vertex (/ (- *floor-size*) 2) 0 (/ *floor-size* 2) )
  (gl-vertex (/ *floor-size* 2) 0 (/ *floor-size* 2) )
  (gl-vertex (/ *floor-size* 2) 0 (/ (- *floor-size*) 2) )
  (gl-end)
  (gl-pop-matrix)
  )

(define (display-player)
  ;;key control
  (cond
   ( (char=? *keycode* #\a) (set! (x-of *player*) (- (x-of *player*) 0.1)) )
   ( (char=? *keycode* #\d) (set! (x-of *player*) (+ (x-of *player*) 0.1)) )
   ( (char=? *keycode* #\w) (set! (z-of *player*) (- (z-of *player*) 0.1)) )
   ( (char=? *keycode* #\s) (set! (z-of *player*) (+ (z-of *player*) 0.1)) )
   )
  ;;display player
  (display-cube: *player* 0.25)
  )

(define-method display-cube: ((obj <3d-object>) size)
  (gl-push-matrix)
  (gl-material GL_FRONT_AND_BACK GL_DIFFUSE (color-of obj))
  (gl-translate (x-of obj) (y-of obj) (z-of obj) )
  (glut-solid-cube size)
  (gl-pop-matrix)
  )

(define (init)
  (gl-clear-color 0.7 0.7 1 1.0)
  (gl-enable GL_DEPTH_TEST)
  (gl-enable GL_LIGHTING)
  (gl-enable GL_LIGHT0)
  (gl-light GL_LIGHT0 GL_DIFFUSE *light0-color*)
  (gl-light GL_LIGHT0 GL_SPECULAR *light0-color*)
  (gl-enable GL_CULL_FACE)
  (gl-cull-face GL_BACK)
  )

(define (keyboard key x y)
  (if (= key (char->integer #\q))
         (exit 0)
         (set! *keycode* (integer->char key))
         ))

(define (key-up key x y)
  (set! *keycode* #\null))

(define (idle)
  (glut-post-redisplay))

(define (resize w h)
  (gl-viewport 0 0 w h)
  (gl-load-identity)
  (gl-translate 0 0 -0.01)
  (glu-perspective 30 (/ w h) 1 100)
  (glu-look-at 3 4 5 0 0 0 0 1 0)
  )

(define (main args)
  (glut-init args)
  (glut-init-window-size *window-width* *window-height*)
  (glut-init-display-mode (logior GLUT_RGBA GLUT_DOUBLE GLUT_DEPTH))
  (glut-create-window "Colour")
  (glut-display-func display)
  (glut-reshape-func resize)
  (glut-keyboard-func keyboard)
  (glut-keyboard-up-func key-up)
  (glut-idle-func idle)
  (init)
  (glut-main-loop))
