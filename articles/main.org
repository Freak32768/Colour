#+TITLE: Scheme+OpenGLでゲームを作る
#+AUTHOR: Freak32768

* 概要
  こんにちは、ふりーく(Freak32768)です。ここではColourについての解説や、
  製作中の気付きについて書いていきます。

* 前提知識
** Scheme
   - 括弧だらけのプログラミング言語Lispの方言(意味は日本語の"方言"とだいたい同じです)。
     仕様がすごくシンプルである。
   - "Scheme"という単語はプログラミング言語の仕様を指す。
     Schemeのプログラムを動かすには、後述のGaucheのようなソフトウェアが必要。
** Gauche
   - Schemeのプログラムを動かすソフトウェア。製作者はShiro Kawaiさん、日本人である。
   - 実はSchemeはそのままだとシンプルすぎてほぼ何もできないため、いくつか機能が追加されている。
   - ちなみに読み方はゴーシュらしい。
** OpenGL
   - 3Dグラフィックを扱うためのツール。類似のものにDirectXがあるがこちらがWindows, Xbox専用なのに対し
     OpenGLはそれ以外のOSでも使うことができる。
   - CGの理論を忠実に反映した設計であり、またシンプルである。
** GLUT
   - OpenGLは(これまた)シンプルすぎて扱いづらいため、それを扱いやすくするためのツール。これがないとやってられない。
** gauche-gl
   - 先ほど紹介したGaucheというソフトウェアからOpenGL, GLUTを使えるようにしたもの。
** Colour
   - 私が作ったゲーム。この記事で解説していくが、正直クオリティは低い。
** オブジェクト
   - ゲーム内のキャラクターや構造物など、描画されるモノのことを示す単語。
     プログラミング経験者の方は紛らわしいと感じるかもしれないが、どうかご容赦いただきたい。

* 解説
  - 解説における括弧の中身はプログラムを実際に読んでみたい方向けです。ざっくり理解するだけならお気になさらず。
** プログラムの大まかな流れについて
   - このプログラムが起動されるとまず、mainという部分(main.scm L439-L451)が実行されます。
     ここではプレイヤーとか諸々を表示するウィンドウを作り、それから必要な設定などをします。
   - それが終わると、initという部分(main.scm L406-L417)が実行されます。ここではOpenGLを初期化します。
     内容は光源の設定、プログラムの処理方法について、などです。
   - 次はgame-init(main.scm L63-L126)という部分が実行されます。ここではゲーム内のキャラクターや構造物などを初期化します。
   - ゲームの中心となるのはdisplay-main-sceneという部分(main.scm L154-L160)です。ここでゲームの諸々を描画しています。
   - しかしこれをご覧の皆さんはプログラムが短すぎて、本当にキャラクターや構造物が描画されているのか疑問に思うかもしれません。
   - じつはdisplay-main-sceneではdisplay-canvasという部分(main.scm L162-L171)
     を呼び出しています。さらにdisplay-canvasでは各オブジェクトを描画する部分を呼び出しています。
     全部一箇所にまとめて書くと長くなってしまうので、複数の部分に分割しているのです。
** ゲームプログラミングのテクニック
*** 斜め移動
    - "オブジェクトを向いている方向に移動させる"というのはゲームプログラミングにおいてほぼ必須の技術ですが、意外と面倒です。
      その理由は、グラフィックの世界が数学のグラフのように複数の座標軸からなっているからです。
      そのためオブジェクトを向いている方向に動かすには、x軸方向にどれくらい、y軸方向にどれくらい動かす、
      というように命令する必要があります。
      そこで使うのが三角関数。sin, cosをうまく使うと、下図のように軸ごとの移動距離を求められます。
      [[./img/circular.png]]
*** 当たり判定
    - これまたゲームプログラミングにおいてほぼ必須の当たり判定ですが、これまた意外と面倒なのです。
      先述の通りグラフィックの世界は複数の座標軸からなっていて、斜め方向の距離などという概念はありません。
      そこで使うのが三平方の定理です。下図のように三角形を作ると、斜め方向の距離を求めることができます。
      [[./img/distance.png]]
*** 3Dモデルの描画
    - ある意味でこのゲーム最大の目玉()である3Dですが、OpenGLの3D機能はとても貧弱です。
      なんといっても、OpenGLでは基本的な図形しか書くことができないのです。
      ではどうするか、というと、3Dモデルを下図のように一旦複数の三角形の面に分割します。それから三角形の面を
      1つずつ描画していきます。
      [[./img/Dolphin_triangle_mesh.png]]
      (https://en.wikipedia.org/wiki/File:Dolphin_triangle_mesh.png, by Chrschn)
    - しかし今回はこの仕組みを自前で用意しなければなりませんでした。libs/3d-object.scmにその実装があります。
      3Dモデルを描画するシステムの実装は、この作品における最大の難所でした。

* 気づき
** プログラムの分割
   - 今回のColourのようなちっぽけなゲームでも、ゲームとして完成させるためにはコードが数百行になります。
     1画面に収まりきらない量なので、これを1つのファイルにすべてまとめると、後で見返したときに大変なことになります、
     というか製作中になりました。
   - プログラムを書くときは1つのファイルが大きくなりすぎないよう、適切に分割する必要があります。
** 言語の選び方
   - 今回Colourを作るにあたって私がSchemeというマイナーな言語を選択した理由は、Scheme、
     というかLispの構文が美しいと感じていたからです。そしてそれは今も同じです。
     当時はむしろ"Schemeで書く > ゲームを作る" という有様でした。
     しかし言語がマイナーであるが故に情報がほぼ公式ドキュメント(英語)しかなく、欲しい情報を探すのが非常に大変でした。
     また音声を扱うgauche-openalに至ってはドキュメントが見つからず、ゲームの効果音がないという事態になってしまいました。
     この一件で私は、構文だけではなく、その言語の便利なツールの数や情報の数もまた言語の価値だと気づきました。
   - プログラミング言語は目的から選ぶのが良いでしょう。そしてある程度メジャーで、日本語の情報が多いものを選ぶとなお良いです。

* 感想
  - 実は私はこれまで普段遣いのちょっとしたツールしか作ったことがなく、そこそこちゃんとしたプログラムを作るのは初めてでした。
    今回のプロジェクトは私にいくつもの新しいことを教えてくれました。特に"気づき - 言語の選び方"の経験で、私は
    "ゲームプログラミング初心者だけどマイナー言語でも余裕だろう"と自身が意気がっていたことに気付かされました。
    次回のプロジェクトは今回の反省を活かし、よりゲームらしいものにする予定です。乞うご期待

* License
  [[./img/by-sa.png]]
  - This article is licensed under CC BY-SA 4.0.
